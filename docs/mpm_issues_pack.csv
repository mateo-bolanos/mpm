Title,Body,Labels,Assignees,Milestone
"A1: Initialize monorepo, CI and quality gates","**Goal**  
Deterministic dev setup with CI on push and lint/test gates.

**Acceptance Criteria**  
- `make setup && make test` succeeds on a clean checkout.  
- GitHub Actions pipeline with jobs: python lint+tests, node lint+build, docker build, commitlint.  
- Pre-commit hooks for black, isort, ruff, eslint, prettier.  
- Repo structure: backend(Django+DRF+Celery+Redis), frontend(React+Vite+TS+MUI), ops(CI, scripts), docs(ADR, CONTRIBUTING), tests, seed.  

**Dependencies**  
None.

**Agent Prompt**  
```
You are a senior platform engineer. Create a monorepo ""mpm"" with:
- backend: Django 5 + DRF, Postgres, Redis, Celery; poetry; settings via env; healthcheck endpoint.
- frontend: React + Vite + TypeScript + MUI; router; .env support; basic layout shell.
- ops: GitHub Actions CI: python lint+tests; node lint+build; docker build; commitlint.
- tests: pytest with coverage; Playwright scaffold for FE.
- docs: ADR-0001 tech stack; CONTRIBUTING; Makefile targets (setup, run, test).
Enforce black, ruff, isort; eslint+tsc strict. Add pre-commit hooks. Output full tree and key files.
```","phase:1, epic:A, area:platform, type:chore",,MVP
A2: Base domain models & migrations,"**Goal**  
Models for Project, SwimlaneTask, File (versioned), Revision, SampleOrder, Shipment, Event (append-only).

**Acceptance Criteria**  
- Postgres migrations created and applied.  
- DRF serializers and Django admin registered for quick inspection.  
- `factory_boy` factories and pytest model invariant tests.  

**Dependencies**  
A1.

**Agent Prompt**  
```
Read /mnt/data/corrugation_packaging_project_manager_system_design_v_1.md sections 11 and 10.
Implement Django models for all entities listed in §11 and an immutable Event store.
Add DRF serializers + admin, migrations, factories, and tests. Return code and tests.
```","phase:1, epic:A, area:backend, type:feat",,MVP
A3: RBAC and role permissions,"**Goal**  
Enforce role-based permissions (CSR, Structural, Graphics, Sample, DesignMgr, Logistics, Admin).

**Acceptance Criteria**  
- Custom DRF permission classes per role and stage.  
- Unit tests ensure CSR is read-only during Structural/Graphics/Sample and regains edit after Pricing/Quoting.  

**Dependencies**  
A2.

**Agent Prompt**  
```
Implement role-based access as specified in §1 (RBAC Highlights).
Add custom Django permission classes for each role and stage rules.
Include test matrix for role x stage access.
```","phase:1, epic:A, area:security, type:feat",,MVP
B1: Project lifecycle state machine + Events,"**Goal**  
Valid state transitions with events emission.

**Acceptance Criteria**  
- POST /projects/{id}/transition enforces valid transitions; invalid => 422 with reason.
- Each transition appends Event {actor, type, payload, ts}.
- Unit tests: happy paths + invalid transitions; event emission asserted.

**Dependencies**  
A2, A3.

**Agent Prompt**  
```
Create an FSM for Project reflecting §2 Main States and Rules.
Expose /transition endpoint; write Events on change; block invalid transitions.
Provide tests.
```","phase:1, epic:B, area:backend, type:feat",,MVP
B2: Swimlanes: Structural & Graphics with gating,"**Goal**  
Graphics starts only after Structural baselineReadyAt; record timings.

**Acceptance Criteria**  
- /tasks endpoints for Structural and Graphics.
- Graphics cannot start until Structural baselineReadyAt set.
- Timestamps for start/complete; lead time computed.
- Tests for gating and timestamps.

**Dependencies**  
B1.

**Agent Prompt**  
```
Implement /tasks endpoints for Structural and Graphics per §5.
Gate Graphics on Structural baselineReadyAt.
Record start/complete timestamps; compute lead times. Tests included.
```","phase:1, epic:B, area:backend, type:feat",,MVP
B3: Files API with versioning,"**Goal**  
Versioned uploads; immutability of prior versions.

**Acceptance Criteria**  
- Upload increments version; GET latest or by ?version=.
- Storage abstraction (local FS now; MinIO-ready).
- Prior versions read-only.
- Tests for version increment & immutability.

**Dependencies**  
A2.

**Agent Prompt**  
```
Implement File upload endpoints with versioning (cad|dieline|proof|photo|label).
Immutability for older versions; storage abstraction.
Tests verifying version increments and immutability.
```","phase:1, epic:B, area:backend, type:feat",,MVP
B4: Project chat & system notes,"**Goal**  
Project-scoped threads, with backend-generated system notes on transitions.

**Acceptance Criteria**  
- /projects/{id}/threads (create, list, post).  
- Message types: user, system; only backend can create 'system'.  
- RBAC: all project members read; posting per role.  
- Tests for permissions and system note creation on transitions.

**Dependencies**  
B1.

**Agent Prompt**  
```
Add project threads with message types user|system.
System notes created on state transitions. Enforce RBAC. Provide tests.
```","phase:1, epic:B, area:backend, type:feat",,MVP
C1: Intake API & validation,"**Goal**  
CSR can create a project with validations; difficulty/priority captured.

**Acceptance Criteria**  
- POST /api/projects validates §4 fields; returns 201 + ProjectCreated event.
- Tests: required/optional fields; invalid payloads.

**Dependencies**  
A2, B1.

**Agent Prompt**  
```
Create POST /api/projects with fields & validations from §4.
Emit ProjectCreated event. Provide tests.
```","phase:1, epic:C, area:backend, type:feat",,MVP
C2: Triage queue & rush approvals,"**Goal**  
Triage filters & rush approval workflow.

**Acceptance Criteria**  
- GET /triage/queue supports filters (difficulty, skills).
- Rush requires Design Manager approval event before assignment.
- Tests for approval gating.

**Dependencies**  
C1, B1.

**Agent Prompt**  
```
Add triage queue endpoint and rush approval flow:
POST /projects/{id}/rush-request and /rush-approve.
Block assignments until approved when rush is set. Tests included.
```","phase:1, epic:C, area:backend, type:feat",,MVP
C3: Manual assignment endpoints,"**Goal**  
Design Manager can assign Structural/Graphics tasks.

**Acceptance Criteria**  
- POST /tasks/{taskId}/assign {assigneeId}; emits Assigned* events.  
- RBAC: only Design Manager (override rules).  
- Tests for permissions & events.

**Dependencies**  
C2.

**Agent Prompt**  
```
Implement manual assignment with RBAC and event emission.
Endpoint: POST /tasks/{taskId}/assign {assigneeId}. Tests included.
```","phase:1, epic:C, area:backend, type:feat",,MVP
"D1: Sample flow: label, notify logistics, shipment","**Goal**  
Support Sample order to shipment with label and notifications.

**Acceptance Criteria**  
- POST /samples/{projectId}/generate-label => stores PDF as File(type=label) and returns URL.  
- POST /samples/{projectId}/notify-logistics => email stub + ReadyForDispatch event.  
- POST /shipments => courier/bin/truck; tracking fields.  
- Unit tests for state updates and artifacts.

**Dependencies**  
B3, B4.

**Agent Prompt**  
```
Implement SampleOrder & Shipment endpoints and label generation (PDF stub).
Notify logistics via SMTP stub; write events. Provide tests.
```","phase:1, epic:D, area:backend, type:feat",,MVP
"E1: React shell, routing, mock auth/roles","**Goal**  
MUI shell with role switcher (dev-only) and base navigation.

**Acceptance Criteria**  
- AppBar/Drawer, role badge, breadcrumbs.  
- Routes: My Work, Intake Wizard, Triage Board, Project View, Inventory.  
- Type-safe API client (axios + zod).  
- Playwright smoke test.

**Dependencies**  
A1.

**Agent Prompt**  
```
Build React shell with MUI + Vite + TS.
Add mock auth context to switch role; scaffold routes and API client.
```","phase:1, epic:E, area:frontend, type:feat",,MVP
E2: Intake Wizard UI,"**Goal**  
Map §4 fields; validate; create project; navigate to Project View.

**Acceptance Criteria**  
- react-hook-form + zod validation.  
- POST to /api/projects; show server errors.  
- RTL tests for validation.

**Dependencies**  
E1, C1.

**Agent Prompt**  
```
Implement Intake Wizard form mapping §4 fields.
Submit to backend; on success, route to Project View. Include tests.
```","phase:1, epic:E, area:frontend, type:feat",,MVP
E3: Triage Board & Assign UI,"**Goal**  
Board grouped by difficulty; rush approve and assign actions.

**Acceptance Criteria**  
- Cards show title, requested/target dates, rush badge.  
- Actions: Approve Rush, Assign (eligible designer modal).  
- Optimistic updates + error toasts.

**Dependencies**  
E1, C2, C3.

**Agent Prompt**  
```
Create Triage Board UI with actions for rush approval and assignment.
Wire to APIs; add optimistic updates and error handling.
```","phase:1, epic:E, area:frontend, type:feat",,MVP
"E4: Project View: timeline, files, chat, sample panel","**Goal**  
Single view to manage project artifacts and actions.

**Acceptance Criteria**  
- Timeline (Events).  
- Files tab (upload + versions).  
- Threads tab (chat).  
- Right panel: Sample actions (Generate Label, Notify Logistics) & Shipments.  

**Dependencies**  
E1, B3, B4, D1.

**Agent Prompt**  
```
Build Project View with timeline, files, threads, and sample/shipment panels.
Integrate with existing endpoints.
```","phase:1, epic:E, area:frontend, type:feat",,MVP
F1: Structured logging & request IDs,"**Goal**  
Correlated logs across API and background tasks.

**Acceptance Criteria**  
- Request-ID middleware; JSON logs.  
- Celery logs carry correlation ID.  
- Sample log snippet documented.

**Dependencies**  
A1.

**Agent Prompt**  
```
Add request-id middleware, structured JSON logs, and Celery task logging with correlation.
Provide config and a sample log snippet.
```","phase:1, epic:F, area:platform, type:chore",,MVP
F2: End-to-end happy path test (Intake → Shipment),"**Goal**  
Automated demo flow.

**Acceptance Criteria**  
- Playwright test creates project, approves rush, assigns Structural, marks BaselineReady, unblocks Graphics, completes Sample, generates Label, creates Shipment.  
- CI-friendly script included.

**Dependencies**  
E1–E4, C1–C3, D1, B1–B4.

**Agent Prompt**  
```
Create a Playwright e2e covering the full MVP path.
Assert UI state and event presence. Ensure headless CI run.
```","phase:1, epic:F, area:qa, type:test",,MVP
G1: Designer profiles & skills,"**Goal**  
Skill tags, difficulty caps, WIP counts.

**Acceptance Criteria**  
- Designer entity with skills, difficultyCap, workHours, currentWip.  
- GET /designers filters by required skills & difficulty.  
- Seed fixtures.

**Dependencies**  
C3.

**Agent Prompt**  
```
Implement Designer profile entity and filters. Seed fixtures.
```","phase:2, epic:G, area:backend, type:feat",,Phase 2
G2: Auto-assignment scoring and lock,"**Goal**  
Score candidates and auto-assign fairly with SLA awareness.

**Acceptance Criteria**  
- POST /assign/auto returns selected assignee and locks task.  
- Deterministic tests with sample data (availability, WIP, throughput, SLA risk, fairness).  
- Rush requires prior approval.

**Dependencies**  
G1, C2.

**Agent Prompt**  
```
Create assignment scorer per §3 and auto-assign endpoint with tests.
```","phase:2, epic:G, area:backend, type:feat",,Phase 2
H1: Inventory grades CRUD + low-stock alerts,"**Goal**  
Track 48BC/44C/32B/29C and alert when below thresholds.

**Acceptance Criteria**  
- InventoryGrade model & endpoints per §7.  
- Background job emits alerts to Design Manager + Sample lead.  
- FE widget on Inventory page.

**Dependencies**  
A2, E1.

**Agent Prompt**  
```
Add InventoryGrade CRUD with thresholds and alerting job. FE widget.
```","phase:2, epic:H, area:backend, area:frontend, type:feat",,Phase 2
"H2: Tooling registry (dies, mylars, standards)","**Goal**  
CRUD registry and links to projects.

**Acceptance Criteria**  
- Tooling entity and relations to projects.  
- FE table with filters and link from Project View.

**Dependencies**  
A2, E4.

**Agent Prompt**  
```
Implement Tooling registry and UI table with filters; link from Project View.
```","phase:2, epic:H, area:backend, area:frontend, type:feat",,Phase 2
"I1: Analytics SQL views (lead time, acceptance latency)","**Goal**  
Queryable views for BI.

**Acceptance Criteria**  
- SQL views + DRF read-only endpoints for Stage Lead Time and Acceptance Latency (§16).  
- Tests against seeded Event data.

**Dependencies**  
B1, B2.

**Agent Prompt**  
```
Create SQL views and DRF endpoints for lead time and acceptance latency with tests.
```","phase:2, epic:I, area:data, type:feat",,Phase 2
I2: Dashboards: SLA heatmap & WIP aging,"**Goal**  
Visualize risk and aging.

**Acceptance Criteria**  
- FE dashboards using recharts.  
- Export CSV.  
- Data wired to I1 endpoints.

**Dependencies**  
I1, E1.

**Agent Prompt**  
```
Build dashboards for SLA heatmap and WIP aging with CSV export.
```","phase:2, epic:I, area:frontend, type:feat",,Phase 2
J1: Label printing service (ZPL → PDF),"**Goal**  
Render courier/warehouse labels reliably.

**Acceptance Criteria**  
- Microservice converts JSON payload → ZPL → PDF.  
- Generate Label calls it and stores ZPL + PDF artifacts.  
- Golden-sample unit tests.

**Dependencies**  
D1.

**Agent Prompt**  
```
Add label microservice (Django app or FastAPI) for ZPL rendering to PDF; wire into D1.
```","phase:3, epic:J, area:backend, type:feat",,Phase 3
J2: Courier API adapters (UPS sandbox first),"**Goal**  
Shipments integrate with carrier APIs via strategy interface.

**Acceptance Criteria**  
- Strategy interface with UPS sandbox adapter.  
- Rate/label mocked in tests; tracking stored.  
- Webhook endpoint writes delivery Events.

**Dependencies**  
J1, D1.

**Agent Prompt**  
```
Implement courier adapter interface and UPS sandbox adapter with webhooks and tests.
```","phase:3, epic:J, area:backend, type:feat, area:integration",,Phase 3
J3: ArtiosCAD/i-cut handoff (watch folder adapter),"**Goal**  
Detect CAD outputs and attach to Project Files automatically.

**Acceptance Criteria**  
- Poller monitors shared folder; posts file metadata back as File(type=cad|dieline).  
- Events emitted on updates.  
- Tests use temp dir.

**Dependencies**  
B3.

**Agent Prompt**  
```
Create a watch-folder adapter for ArtiosCAD/i-cut outputs; publish files and emit events.
```","phase:3, epic:J, area:integration, type:feat",,Phase 3
UX1: Wireframes for 6 key screens,"**Goal**  
Low-fidelity wireframes to guide FE.

**Acceptance Criteria**  
- Mermaid/SVG wireframes for: My Work, Intake Wizard, Triage Board, Project View, Inventory Grades, Dashboards.  
- Saved to /docs/ux/*.md with interaction notes.

**Dependencies**  
E1.

**Agent Prompt**  
```
Produce low-fidelity wireframes for six key screens with mermaid code blocks and notes.
```","phase:1, epic:UX, area:design, type:docs",,MVP
N1: Auth abstraction with SSO stubs,"**Goal**  
Local auth now; Azure AD/Okta pluggable later.

**Acceptance Criteria**  
- Auth provider abstraction; local provider implemented.  
- Placeholders for Azure AD/Okta with config docs (/docs/auth.md).

**Dependencies**  
A1, E1.

**Agent Prompt**  
```
Abstract auth provider; implement local auth and prepare Azure AD/Okta stubs with documentation.
```","phase:1, epic:N, area:security, type:feat",,MVP
N2: Audit export (Events CSV/JSON) + retention notes,"**Goal**  
Admin-only export for audits.

**Acceptance Criteria**  
- /audit/export?from=&to=&format=csv|json streaming immutable Events with signatures.  
- Rate limited; admin-only.  
- Retention policy documented.

**Dependencies**  
B1.

**Agent Prompt**  
```
Implement audit export endpoint with auth, rate limiting, and signatures; document retention.
```","phase:1, epic:N, area:security, type:feat",,MVP
DEMO: Demo script + seed data + make target,"**Goal**  
Click-through demo for stakeholders.

**Acceptance Criteria**  
- `make demo` loads fixtures and creates a demo account with all roles.  
- Script covers: Intake → Rush approval → Structural baseline → Graphics → Sample label → Shipment.  
- README with steps and screenshots placeholders.

**Dependencies**  
E4, F2.

**Agent Prompt**  
```
Write a demo script and fixtures; add `make demo` target to run end-to-end locally.
```","phase:1, epic:demo, area:docs, type:docs",,MVP
